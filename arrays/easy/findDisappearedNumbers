/*
448. Find All Numbers Disappeared in an Array

Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:

Input: nums = [1,1]
Output: [2]
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
 

Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.
*/

// SOLUTION ---------- TIME COMPEXITY => o(n) and SPACE COMPLEXITY => o(n)

/*
var findDisappearedNumbers = function (nums) {
  const n = nums.length;
  const numsSet = new Set(Array.from({ length: n }, (_, i) => i + 1));

  for (let i = 0; i < n; i++) {
    if (numsSet.has(nums[i])) {
      numsSet.delete(nums[i]);
    }
  }

  return Array.from(numsSet);
};
*/

// ===========================================

// SOLUTION ---------- TIME COMPEXITY => o(n) and SPACE COMPLEXITY => o(1)

var findDisappearedNumbers = function (nums) {
  const n = nums.length;
  const result = [];

  for (let i = 0; i < n; i++) {
    const val = Math.abs(nums[i]);
    const index = val - 1;

    nums[index] = Math.abs(nums[index]) * -1;
  }

  for (let i = 0; i < n; i++) {
    if (nums[i] > 0) {
      result.push(i + 1);
    }
  }

  return result;
};

// Here we are marking index position of value already exist in nums array only, remaining positive value are position where their dedicated values are disappeared.

// TESTING

console.log(findDisappearedNumbers([4, 3, 2, 7, 8, 2, 3, 1]));
console.log(findDisappearedNumbers([1, 1]));
